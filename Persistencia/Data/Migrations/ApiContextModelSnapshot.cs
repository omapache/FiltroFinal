// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApellidoContacto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("ApellidoContacto");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Ciudad");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("CodigoPostal");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Fax");

                    b.Property<int>("IdEmpleadoFk")
                        .HasColumnType("int");

                    b.Property<decimal>("LimiteCredito")
                        .HasColumnType("decimal(18,10)")
                        .HasColumnName("LimiteCredito");

                    b.Property<string>("LineaDireccion1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("LineaDireccion1");

                    b.Property<string>("LineaDireccion2")
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("LineaDireccion2");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreCliente");

                    b.Property<string>("NombreContacto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("NombreContacto");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Pais");

                    b.Property<string>("Region")
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Region");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Telefono");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpleadoFk");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.DetallePedido", b =>
                {
                    b.Property<int>("IdPedidoFk")
                        .HasColumnType("int");

                    b.Property<string>("IdProductoFk")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("Cantidad");

                    b.Property<short>("NumeroSalida")
                        .HasColumnType("smallint")
                        .HasColumnName("NumeroSalida");

                    b.Property<decimal>("PrecioUnidad")
                        .HasColumnType("decimal(18,10)")
                        .HasColumnName("PrecioUnidad");

                    b.HasKey("IdPedidoFk", "IdProductoFk");

                    b.HasIndex("IdProductoFk");

                    b.ToTable("DetallePedido", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Apellido1");

                    b.Property<string>("Apellido2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Apellido2");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Extension");

                    b.Property<int?>("IdJefeFk")
                        .HasColumnType("int");

                    b.Property<string>("IdOficinaFk")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombre");

                    b.Property<string>("Puesto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Puesto");

                    b.HasKey("Id");

                    b.HasIndex("IdJefeFk");

                    b.HasIndex("IdOficinaFk");

                    b.ToTable("Empleado", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.GamaProducto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DescripcionHtml")
                        .HasMaxLength(255)
                        .HasColumnType("text")
                        .HasColumnName("DescripcionHtml");

                    b.Property<string>("DescripcionTexto")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("text")
                        .HasColumnName("DescripcionTexto");

                    b.Property<string>("Imagen")
                        .HasMaxLength(256)
                        .HasColumnType("varchar")
                        .HasColumnName("Imagen");

                    b.HasKey("Id");

                    b.ToTable("GamaProducto", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Oficina", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Ciudad");

                    b.Property<string>("CodigoPostal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("CodigoPostal");

                    b.Property<string>("LineaDireccion1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("LineaDireccion1");

                    b.Property<string>("LineaDireccion2")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("LineaDireccion2");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Pais");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Region");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Telefono");

                    b.HasKey("Id");

                    b.ToTable("Oficina", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Pago", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("FechaPago")
                        .HasColumnType("Date")
                        .HasColumnName("FechaPago");

                    b.Property<string>("FormaPago")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("FormaPago");

                    b.Property<int>("IdClienteFk")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,10)")
                        .HasColumnName("Total");

                    b.HasKey("Id");

                    b.HasIndex("IdClienteFk");

                    b.ToTable("Pago", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comentarios")
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Comentarios");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Estado");

                    b.Property<DateOnly?>("FechaEntregada")
                        .HasColumnType("Date")
                        .HasColumnName("FechaEntregada");

                    b.Property<DateOnly>("FechaEsperada")
                        .HasColumnType("Date")
                        .HasColumnName("FechaEsperada");

                    b.Property<DateOnly>("FechaPedido")
                        .HasColumnType("Date")
                        .HasColumnName("FechaPedido");

                    b.Property<int>("IdClienteFk")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdClienteFk");

                    b.ToTable("Pedido", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<short>("CantidadStock")
                        .HasColumnType("smallint")
                        .HasColumnName("CantidadStock");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("text")
                        .HasColumnName("Descripcion");

                    b.Property<string>("Dimension")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Dimension");

                    b.Property<string>("IdGamaProductoFk")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Nombre");

                    b.Property<decimal>("PrecioProveedor")
                        .HasColumnType("decimal(18,10)")
                        .HasColumnName("PrecioProveedor");

                    b.Property<decimal>("PrecioVenta")
                        .HasColumnType("decimal(18,10)")
                        .HasColumnName("PrecioVenta");

                    b.Property<string>("Proveedor")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar")
                        .HasColumnName("Proveedor");

                    b.HasKey("Id");

                    b.HasIndex("IdGamaProductoFk");

                    b.ToTable("Producto", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.HasOne("Dominio.Entities.Empleado", "Empleado")
                        .WithMany("Clientes")
                        .HasForeignKey("IdEmpleadoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("Dominio.Entities.DetallePedido", b =>
                {
                    b.HasOne("Dominio.Entities.Pedido", "Pedido")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("IdPedidoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Producto", "Producto")
                        .WithMany("DetallePedidos")
                        .HasForeignKey("IdProductoFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.HasOne("Dominio.Entities.Empleado", "Jefe")
                        .WithMany("Empleados")
                        .HasForeignKey("IdJefeFk");

                    b.HasOne("Dominio.Entities.Oficina", "Oficina")
                        .WithMany("Empleados")
                        .HasForeignKey("IdOficinaFk");

                    b.Navigation("Jefe");

                    b.Navigation("Oficina");
                });

            modelBuilder.Entity("Dominio.Entities.Pago", b =>
                {
                    b.HasOne("Dominio.Entities.Cliente", "Cliente")
                        .WithMany("Pagos")
                        .HasForeignKey("IdClienteFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Dominio.Entities.Pedido", b =>
                {
                    b.HasOne("Dominio.Entities.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdClienteFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.HasOne("Dominio.Entities.GamaProducto", "GamaProducto")
                        .WithMany("Productos")
                        .HasForeignKey("IdGamaProductoFk");

                    b.Navigation("GamaProducto");
                });

            modelBuilder.Entity("Dominio.Entities.Cliente", b =>
                {
                    b.Navigation("Pagos");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Entities.GamaProducto", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.Entities.Oficina", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Entities.Pedido", b =>
                {
                    b.Navigation("DetallePedidos");
                });

            modelBuilder.Entity("Dominio.Entities.Producto", b =>
                {
                    b.Navigation("DetallePedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
